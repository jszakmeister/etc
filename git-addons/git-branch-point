#!/bin/sh
# Copyright (c) 2015, John Szakmeister <john@szakmeister.net>
#
# Determine the point from with the specified branch was created.
#
# This may not be the most expedient mechanism, but it returns better results
# than git merge-base branch1 branch2, when branch2 has been merged into
# branch1.
set -e

USAGE="[options] [BASE | BRANCH BASE]"
LONG_USAGE="BRANCH defaults to HEAD, and BASE defaults to master.

Options:
    --raw   Output just the commit, instead of commit and a oneline summary.
"

SUBDIRECTORY_OK=1 . "$(git --exec-path)/git-sh-setup" ||
    die "Not a git repository."

RAW=

cmd_branch_point()
{
    local base_branch="master"
    local branch="HEAD"

    if [ "$1" != "" ]; then
        base_branch="$1"
    fi

    if [ "$2" != "" ]; then
        base_branch="$2"
        branch="$1"
    fi

    first_commit="$(git rev-list "${base_branch}..${branch}" | tail -n 1)"

    # If no commits are listed, then assume the tip of base_branch.
    if [ "$first_commit" == "" ]; then
        first_commit="$(git rev-parse "${base_branch}")"
    else
        first_commit="${first_commit}^"
    fi

    if [ "$RAW" != "" ]; then
        git rev-parse "${first_commit}"
    else
        git log -1 --oneline "${first_commit}"
    fi
}

if [ "$1" == "--raw" ]
then
    shift
    RAW=true
fi

cmd_branch_point "$@"
