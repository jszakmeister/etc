#!/bin/bash
SUBDIRECTORY_OK=1 source "$(git --exec-path)/git-sh-setup" ||
    die "ERROR: Not a git repository."

function check_ref()
{
    local REF="$1"
    local BRANCHES="development develop dev master"
    for r in $BRANCHES
    do
        if [ "$r" == "$REF" ]
        then
            return 0
        fi
    done

    return 1
}

if [ "$1" = "-n" ]
then
    shift
    DRY_RUN=echo
fi

REF="$(git symbolic-ref --short HEAD)"

if ! check_ref "$REF"
then
    die "ERROR: Not on an acceptable branch (master, dev, develop, development)"
fi

# Need to find a way to handle "git branch -d" with it's safety
# mechanism.  At the moment, it'll complain if a branch is not merged
# to whatever branch we have checked out, which is why we require master
# right now.
git branch -a --merged "$REF" |
    egrep -v '^(\* |[ \t]*|.*/remotes)([0-9]+\.[0-9]+\.x|master|develop|development|HEAD|integrate|remotes/.*)$' |
    egrep -v "$REF" |
    while read -r branch
    do
        ${DRY_RUN} git branch -d "$branch"
    done
