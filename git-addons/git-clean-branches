#!/bin/bash
SUBDIRECTORY_OK=1 source "$(git --exec-path)/git-sh-setup" ||
    die "ERROR: Not a git repository."


function determine_ref()
{
    local BRANCHES="development develop dev main master"
    for r in $BRANCHES
    do
        if git rev-parse -q --verify "$r" >/dev/null 2>&1
        then
            echo "$r"
            return 0
        fi
    done

    return 1
}


function check_ref()
{
    local REF="$1"
    local BRANCHES="development develop dev main master"
    for r in $BRANCHES
    do
        if [ "$r" == "$REF" ]
        then
            return 0
        fi
    done

    return 1
}

while :
do
    case "$1" in
        -n)
            shift
            DRY_RUN="echo"
            ;;
        --auto)
            shift
            REF="$(determine_ref)" || die "ERROR: Couldn't determine mainline branch."
            ;;
        *)
            break
            ;;
    esac
done

if [ -z "$REF" ]
then
    if [ -z "$1" ]
    then
        REF="$(git symbolic-ref --short HEAD)"
    else
        REF="$1"
    fi
fi

if ! check_ref "$REF"
then
    die "ERROR: Not on an acceptable branch (master, main, dev, develop, development)"
fi

CURRENT_BRANCH="$(git symbolic-ref --short HEAD)"

# Need to find a way to handle "git branch -d" with it's safety
# mechanism.  At the moment, it'll complain if a branch is not merged
# to whatever branch we have checked out, which is why we require master
# right now.
git branch --format="%(refname:short)" --merged "$REF" |
    egrep -v '^(\* |[ \t]*|.*/remotes)([0-9]+\.[0-9]+\.x|master|main|develop|development|dev|HEAD|integrate|.*(\b|_)test(\b|_).*|remotes/.*)$' |
    egrep -v "^$REF\$" |
    egrep -v "^$CURRENT_BRANCH\$" |
    while read -r branch
    do
        ${DRY_RUN} git branch -d "$branch"
    done
