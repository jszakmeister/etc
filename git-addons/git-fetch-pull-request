#!/bin/sh
# Copyright (c) 2012-2019, John Szakmeister <john@szakmeister.net>
#
# Idea was taken from here, but extended:
#    <https://community.jboss.org/blogs/stuartdouglas/2011/09/06/merging-github-pull-requests>

die () {
    echo >&2 "ERROR: $*"
    exit 1
}

find_upstream() {
    for up in "upstream" "origin"
    do
        git config --get --local remote.$up.url 2>&1 > /dev/null
        if test $? -eq 0; then
            echo $up
            return 0
        fi
    done

    die "No upstream or origin remote.  " \
        "Can't determine where to fetch pull requests"
}

fetch() {
    local upstream=$(find_upstream)
    local failed=
    local pull_request_type=
    local pull_request_branch=

    if git ls-remote --exit-code "$upstream" 'refs/pull/*' > /dev/null 2>&1
    then
        pull_request_type="github"
    elif git ls-remote --exit-code "$upstream" 'refs/merge-requests/*' > /dev/null 2>&1
    then
        pull_request_type="gitlab"
    else
        die "Can't find pull request branch for $var"
    fi

    cur_head="$(git symbolic-ref --short HEAD 2>/dev/null)"
    for var in "$@"
    do
        if [ "$pull_request_type" = "github" ]
        then
            pull_request_branch="pull/$var/head"
        else
            pull_request_branch="merge-requests/$var/head"
        fi

        branch_name="pr-$var"
        if [ "$cur_head" = "$branch_name" ]
        then
            git fetch -v "$upstream" "$pull_request_branch" &&
                git reset --hard FETCH_HEAD || failed=true
        else
            git fetch -v $upstream "+$pull_request_branch:$branch_name" ||
                failed=true
        fi
    done

    test -z "$failed" || die "Could not fetch all the pull requests."
}

while [ "$#" -gt 0 ]
do
    key="$1"

    case $key in
        *)
            if [ "$key" = -* ]
            then
                # unknown option
                die "Unknown option '$key'"
            else
                break
            fi
            ;;
    esac
done


fetch "$@"
