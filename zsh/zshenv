ETC_HOME=${ETC_HOME:-~/projects/etc}
ETC_USER="${ETC_USER:-$(whoami)}"

ETC_ZSHENV_SOURCED=1

# Set up a few options.  Mainly to keep warnings from being
# emitted... as that would break the output of non-interactive
# scripting environments.
setopt case_glob            # case sensitive globbing
setopt clobber              # redirection can create files
setopt glob                 # want globbing
unsetopt nomatch            # don't warn about non-matching globs
setopt pushd_silent         # don't print stack after push/pop

# A function to help with creating directory aliases and providing
# completion for them.
# Taken from here:
#   https://github.com/caio/oh-my-zsh/blob/master/plugins/make-dir-complete/make-dir-complete.plugin.zsh
function _make_dir_complete()
{
    if [ ${#} -ne 3 ]; then
        echo "usage: make_dir_complete <new-alias-name> <command> <path>" 1>&2
        return 1
    fi

    local aliasname=$1

    if type $aliasname >/dev/null 2>&1; then
        echo "Error: can't overwrite previously defined command \"$1\"" 1>&2
        return 1
    fi
    if [ ! -d $3 ]; then
        echo "Error: \"$3\" doesn't point to a directory" 1>&2
        return 1
    fi

    cd "$3" >/dev/null 2>&1
    local dirname=$(pwd -L)
    local realpath=$(pwd -P)
    cd - >/dev/null 2>&1

    FUNC="$aliasname () { $2 \"$dirname/\$@\" }"

    eval $FUNC
    compdef "_path_files -/ -W \"$realpath\"" "$aliasname"
}

function _find_executable()
{
    whence -p "$@"
}

. "$ETC_HOME/shell-common/noninteractive.sh"

test -s "$ETC_HOME/user/$ETC_USER/env.sh" &&
    . "$ETC_HOME/user/$ETC_USER/env.sh"
