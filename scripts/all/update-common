#!/bin/bash
die()
{
    echo 1>&2 "ERROR: $@"
    exit 1
}

trim()
{
    local var="$@"
    var="${var#"${var%%[![:space:]]*}"}"
    var="${var%"${var##*[![:space:]]}"}"
    echo -n "$var"
}

if test -t 1 && type -P tput 2>&1 > /dev/null; then
    color_bold_yellow=$(tput bold;tput setaf 3)
    color_reset=$(tput sgr0)
else
    color_bold_yellow=
    color_reset=
fi

say()
{
    [ -z "$QUIET" ] && echo "$color_bold_yellow${@/$HOME/~}$color_reset"
    return 0
}

update_repo()
{
    local repo_path=$(echo -n "$1" | sed -e "s|~|$HOME|")
    if test ! -d "$repo_path" ; then
        return 0
    fi

    if test ! -d "$repo_path/.git" ; then
        return 0
    fi

    local curDir=$(pwd)
    say "Updating $repo_path..." &&
        cd "$repo_path" &&
        git ffwd ${FFWD_OPTIONS}
    cd "$curDir"
}

while [[ $# > 0 ]]
do
    key="$1"
    shift

    case $key in
        -q)
            FFWD_OPTIONS="$FFWD_OPTIONS -q"
            QUIET=t
            ;;
        --no-remote)
            FFWD_OPTIONS="$FFWD_OPTIONS --no-remote"
            ;;
        *)
            # unknown option
            die "Unknown option '$key'"
            ;;
    esac
done

update_repo ~/.vim
update_repo ~/.vimuser
update_repo ~/.etc
update_repo ~/.ssh
update_repo ~/projects/etc
update_repo ~/projects/jszakmeister/local-homepage
update_repo ~/projects/local-homepage

if test -f ~/.update-commonrc ; then
    while read line
    do
        line=$(trim "$line")

        if [ -n "$line" ] && [[ $line != \#* ]] ; then
            update_repo "$line"
        fi
    done < ~/.update-commonrc
fi
