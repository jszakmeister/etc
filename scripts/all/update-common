#!/bin/bash
die()
{
    echo 1>&2 "ERROR: $1"
    exit 1
}

trim()
{
    local var="$1"
    var="${var#"${var%%[![:space:]]*}"}"
    var="${var%"${var##*[![:space:]]}"}"
    echo -n "$var"
}

if test -t 1 && type -P tput > /dev/null 2>&1; then
    color_bold_yellow=$(tput bold;tput setaf 3)
    color_reset=$(tput sgr0)
else
    color_bold_yellow=
    color_reset=
fi

say()
{
    [ -z "$QUIET" ] && echo "$color_bold_yellow${1/$HOME/~}$color_reset"
    return 0
}

update_repo()
{
    local repo_path
    local cur_dir

    repo_path="$(echo -n "$1" | sed -e "s|~|$HOME|")"

    if test ! -d "$repo_path" ; then
        return 0
    fi

    if test -d "$repo_path/.git" ; then
        # shellcheck disable=SC2086
        say "Updating $repo_path..." &&
            git "--git-dir=$repo_path/.git" "--work-tree=$repo_path" \
                ffwd ${FFWD_OPTIONS}
        return $?
    fi

    if test -d "$repo_path/.svn" ; then
        say "Updating $repo_path..." &&
            svn up $repo_path
        return $?
    fi

    return 0
}

while [ $# -gt 0 ]
do
    key="$1"
    shift

    case $key in
        -q)
            FFWD_OPTIONS="$FFWD_OPTIONS -q"
            QUIET=t
            ;;
        --no-remote)
            FFWD_OPTIONS="$FFWD_OPTIONS --no-remote"
            ;;
        -s|--status)
            FFWD_OPTIONS="$FFWD_OPTIONS --status"
            ;;
        *)
            # unknown option
            die "Unknown option '$key'"
            ;;
    esac
done

REPOS=(~/.vim \
       ~/.vimuser \
       ~/.etc \
       ~/.ssh \
       ~/projects/etc \
       ~/projects/jszakmeister/local-homepage \
       ~/projects/local-homepage)

for repo in "${REPOS[@]}"
do
    update_repo "$repo"
done

if test -f ~/.update-commonrc ; then
    while read -r line
    do
        line=$(trim "$line")

        if [ -n "$line" ] && [[ $line != \#* ]] ; then
            update_repo "$line"
        fi
    done < ~/.update-commonrc
fi
