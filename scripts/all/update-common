#!/usr/bin/env python3
import argparse
import logging
import os
import shutil
import subprocess
import sys

from glob import glob
from pathlib import Path
from pprint import pprint


UPDATE_COMMONRC = Path("~/.update-commonrc").expanduser()
DEFAULT_REPOS = [
    "~/.vim",
    "~/.vimuser",
    "~/.etc",
    "~/.ssh",
    "~/projects/etc",
    "~/projects/jszakmeister/local-homepage",
    "~/projects/local-homepage)",
]


FFWD_OPTIONS = []
SVN_OPTIONS = []

GIT_PRESENT = False
SVN_PRESENT = False

IS_MINGW = False

QUIET = False

# Will hold a path for helping to expand `~`.  We do this because working with
# MINGW introduces some problems in environments like Git Bash.
HOME = None


COLORS = {
    "yellow": "",
    "reset": "",
}


class ScriptError(Exception):
    pass


def setup_say():
    tput_path = shutil.which("tput")
    if tput_path and sys.stdout.isatty():
        COLORS["yellow"] = "".join(
            [
                run(tput_path, "bold"),
                run(tput_path, "setaf", "3"),
             ]
        )
        COLORS["reset"] = run(tput_path, "sgr0")


def say(msg):
    if QUIET:
        return

    print(f"{COLORS['yellow']}{msg}{COLORS['reset']}")

    if IS_MINGW:
        sys.stdout.flush()


def resolve_home():
    global HOME

    home = os.getenv("HOME")

    if not home:
        home = Path("~").expanduser()

    elif sys.platform == "win32" and IS_MINGW:
        output = run("cmd", "/c", "echo", "home", capture=True).strip()
        if not output:
            raise ScriptError(
                "Unable to determine location of home directory from $HOME")
        home = Path(output)

    else:
        home = Path(home)

    HOME = home


def run(*args, **kwargs):
    show_cmd = kwargs.get('show_cmd', False)
    shell = kwargs.get('shell', False)
    encoding = kwargs.get('encoding', 'utf-8')
    capture = kwargs.get('capture', True)

    if shell:
        command = ' '.join([shlex.quote(x) for x in args])
    else:
        command = args

    if show_cmd:
        print(' '.join(args))

    check_ret = kwargs.get('check_ret', True)

    if capture:
        stdout = subprocess.PIPE
    else:
        stdout = None

    p = subprocess.Popen(
        command, shell=shell, encoding=encoding,
        stdout=stdout, stderr=subprocess.STDOUT)

    # There will be no data if we're not capturing.
    output = p.communicate()

    retcode = p.poll()
    if check_ret and retcode:
        raise ScriptError("Error executing: %r (%d):\n%s" % (
            command, retcode, output[0]))

    return output[0] or ""


def run_git(*args, **kwargs):
    path = kwargs.pop('path', None)

    if path is not None:
        path = str(path)

        if path.endswith('.git'):
            args = ['--git-dir=%s' % path] + list(args)
        else:
            args = ['--git-dir=%s/.git' % path, '--work-tree=%s' % path] + list(args)

    command = ['git'] + list(args)
    return run(*command, **kwargs).strip()


def format_path(path):
    home = str(Path.home())

    if str(path).startswith(home):
        return str(path).replace(home, "~", 1)

    return str(path)


def update_repo(path):
    git_path = path / ".git"
    svn_path = path / ".svn"

    formatted_path = format_path(path)

    if git_path.exists():
        say(f"Updating {formatted_path}...")
        # It's a git repo, so update via `git ffwd`...
        run_git("ffwd", *FFWD_OPTIONS, path=path, check_ret=False, capture=False)

    elif svn_path.exists():
        say(f"Updating {formatted_path}...")
        run("svn", "up", *SVN_OPTIONS, path, check_ret=False, capture=False)



def update(repo_list):
    for repo_entry in repo_list:
        repos = [Path(repo_entry).expanduser()]

        for repo in repos:
            update_repo(repo)


def expand_entry(entry):
    # We do it this way because MINGW and standard Windows Python don't
    # necessarily play well together.  In particular, and user's HOME directory
    # can be different than what `.expanduser()` returns.  So we do the
    # expansion ourselves.
    if entry.parts[0] == "~":
        entry = HOME.joinpath(*entry.parts[1:])

    results = []

    for possible_path in glob(str(entry)):
        results.append(possible_path)

    return results


def check_relative(paths):
    for entry in paths:
        if entry.parts[0] == "~":
            continue
        elif not entry.is_absolute():
            raise ValueError(
                f"No relative entries in ~/.update-commonrc: {entry!s}")


def do_update(args):
    global FFWD_OPTIONS, SVN_OPTIONS, QUIET

    if args.quiet:
        FFWD_OPTIONS.append("-q")
        SVN_OPTIONS.append("-q")
        QUIET = True

    if not args.remote_update:
        FFWD_OPTIONS.append("--no-remote")

    if args.status:
        FFWD_OPTIONS.append("--status")

    # Process the rc file...
    extra_repos = []
    if UPDATE_COMMONRC.exists():
        extra_repos = list(
            filter(
                lambda entry: "" if entry.lstrip().startswith("#") else entry.strip(),
                UPDATE_COMMONRC.read_text().splitlines()))

    all_repos = set()
    all_repos.update(Path(x) for x in DEFAULT_REPOS)
    all_repos.update(Path(x) for x in extra_repos)

    check_relative(all_repos)

    all_repos_expanded = set()
    for entry in all_repos:
        all_repos_expanded.update(expand_entry(entry))

    all_repos_expanded = sorted(all_repos_expanded)

    update(all_repos_expanded)


def main():
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "--traceback",
        default=False,
        action="store_true",
        help="Print traceback of error.")
    parser.add_argument(
        "-q", "--quiet",
        default=False,
        action="store_true",
        help="Have less output.")
    parser.add_argument(
        "--no-remote",
        default=True,
        action="store_false",
        dest="remote_update",
        help="Don't update from the remote.  Just attempt to fast-forward "
             "locally.  (git only)")
    parser.add_argument(
        "-s", "--status",
        default=False,
        action="store_true",
        help="Show status information instead of fast-forwarding. (git -only)")

    args = parser.parse_args()

    global GIT_PRESENT
    global SVN_PRESENT
    global IS_MINGW

    if shutil.which("git"):
        GIT_PRESENT = True

    if shutil.which("svn"):
        SVN_PRESENT = True

    if os.getenv("MINGW_PREFIX"):
        IS_MINGW = True

    setup_say()

    try:
        resolve_home()

        do_update(args)
    except KeyboardInterrupt:
        pass
    except Exception as e:
        if args.traceback:
            raise

        print(f"ERROR: {e!s}", file=sys.stderr)
        sys.exit(1)


if __name__ == "__main__":
    main()
