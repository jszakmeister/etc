#!/usr/bin/env python3
import argparse
import os
import re
import stat
import sys


bom_re = re.compile(rb'^\xEF\xBB\xBF')
eol_re = re.compile(rb'\r?\n')
exec_re = re.compile(rb'^(\xEF\xBB\xBF)?#!')
tab_re = re.compile(rb'^( *)(\t+)( *)', re.MULTILINE)
trailing_re = re.compile(rb'([ \t]+)(?=\r?\n|$)')


ignore_dirs = [
    r'.*\.egg-info',
    r'\..*',
    r'build',
    r'dist',
    r'node_modules',
]

extensions = [
    'C',
    'c',
    'cc',
    'clj',
    'cpp',
    'css',
    'editorconfig',
    'erb',
    'gitattributes',
    'gitignore',
    'h',
    'hpp',
    'html',
    'ini',
    'java',
    'js',
    'json',
    'md',
    'pl',
    'py',
    'rb',
    'rest',
    'rst',
    'sh',
    'ts',
    'txt',
    'yml',
]

convert_tab_extensions = set([
    'C',
    'c',
    'cc',
    'clj',
    'cpp',
    'erb',
    'h',
    'hpp',
    'java',
    'js',
    'json',
    'md',
    'pl',
    'py',
    'rb',
    'rest',
    'rst',
    'sh',
    'ts',
    'txt',
    'yml',
])


# Borrow from converting tabs and drop off Markdown files, since there
# are occasions where it's necessary to have trailing whitespace.
trailing_whitespace_extensions = convert_tab_extensions - set(['md'])


files_re = re.compile(r'.*\.(' + '|'.join(extensions) + r')$')
ignore_re = re.compile(r'^(' + '|'.join(ignore_dirs) + r')$')


def get_extension(path):
    ext = os.path.splitext(path)[1]
    if ext.startswith('.'):
        ext = ext[1:]

    return ext


def replace_tabs(m, tab_size=8):
    if tab_size == 8:
        tab_repl = b'        '
    elif tab_size == 4:
        tab_repl = b'    '
    elif tab_size == 2:
        tab_repl = b'  '
    else:
        tab_repl = tab_size * b' '

    return m.group(1) + len(m.group(2)) * tab_repl + m.group(3)


def fix_eol_bom_exec(path, eol=True, bom=True, exec=True, tabs=4,
                     trailing=True, eof=True, dry_run=False):
    if not any([eol, bom, exec, tabs]):
        return False

    modified = False

    ext = get_extension(path)

    has_shebang = False
    with open(path, 'r+b') as f:
        buf = orig_buf = f.read()

        has_shebang = (exec_re.match(buf) and True) or False

        if bom:
            buf = bom_re.sub(rb'', buf)

        if eol:
            buf = eol_re.sub(rb'\n', buf)

        if tabs and (ext in convert_tab_extensions):
            buf = tab_re.sub(lambda x: replace_tabs(x, tabs), buf)

        if trailing and (ext in trailing_whitespace_extensions):
            buf = trailing_re.sub(rb'', buf)

        if eof:
            buf.rstrip()
            buf += b'\n'

        if buf != orig_buf:
            modified = True
            if not dry_run:
                f.seek(0)
                f.write(buf)
                f.truncate()

    if exec:
        mode = os.stat(path).st_mode
        if has_shebang:
            new_mode = mode | (stat.S_IXUSR | stat.S_IXGRP | stat.S_IXOTH)
        else:
            new_mode = mode & ~(stat.S_IXUSR | stat.S_IXGRP | stat.S_IXOTH)
        if new_mode != mode:
            modified = True
            if not dry_run:
                os.chmod(path, new_mode)

    return modified


def filter_dirs(dirs):
    remove_dirs = []
    for i, d in enumerate(dirs):
        if ignore_re.match(d):
            remove_dirs.append(i)

    remove_dirs.reverse()
    for i in remove_dirs:
        del dirs[i]


def collect_files(path):
    for root, dirs, files in os.walk(path):
        filter_dirs(dirs)

        for filename in files:
            if files_re.match(filename):
                yield os.path.join(root, filename)

    return files


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--dry-run", action='store_true', default=False,
                        help="Don't actually modify the files.")
    parser.add_argument("-v", "--verbose", action='store_true', default=False,
                        help="Show more information.")
    parser.add_argument("-t", "--tabs", default=4,
                        help="The number of spaces to convert tabs to.  "
                             "Default is 4.")
    parser.add_argument("--no-bom", action='store_false',
                        dest='bom', default=True,
                        help="Disable BOM removal.")
    parser.add_argument("--no-tabs", action='store_false',
                        dest='tabs',
                        help="Disable tab expansion.")
    parser.add_argument("--no-trailing", action='store_false',
                        dest='trailing', default=True,
                        help="Disables stripping of trailing whitespace.")
    parser.add_argument("--no-exec", action='store_false',
                        dest='exec', default=True,
                        help="Disables fixing of the executable bit.")
    parser.add_argument("--no-eof", action='store_false',
                        dest='eof', default=True,
                        help="Disables fixing of the end-of-file.  Strips "
                             "whitespace and ensures file ends with a newline.")
    parser.add_argument("files", nargs="+",
                        help="The files to examine and fix.")

    args = parser.parse_args()

    for path in args.files:
        if os.path.isdir(path):
            for path in collect_files(path):
                if args.verbose:
                    print("Examining %s..." % (path,))
                if fix_eol_bom_exec(path, exec=args.exec, tabs=args.tabs,
                                    trailing=args.trailing, bom=args.bom,
                                    eof=args.eof, dry_run=args.dry_run):
                    print("Fixed %s..." % (path,))

        else:
            if args.verbose:
                print("Examining %s..." % (path,))

            if fix_eol_bom_exec(path, exec=args.exec, tabs=args.tabs,
                                trailing=args.trailing, bom=args.bom,
                                dry_run=args.dry_run):
                print("Fixed %s..." % (path,))


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print("ERROR: %s" % (e,), file=sys.stderr)
        raise
        sys.exit(1)
    except KeyboardInterrupt:
        pass
