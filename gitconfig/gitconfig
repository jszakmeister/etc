# enable color when possible
[color]
	ui = auto

# add some short cuts... most of them familiar to those of us coming from
# other VCSes.
[alias]
	co = checkout
	st = status -sb

	# A quick way to squash changes into the previous commit using
	# the same log message
	amend = commit --amend -C HEAD

        # A handy graph-based log view
        lol = log --abbrev-commit --graph --decorate

        # Fast-forward pull
        ff = "!sh -c 'git merge --ff --ff-only ${1:-\"@{u}\"}' -"

        # Fetch all branches
        fa = fetch --all

        # Fetch all tags
        ft = fetch --tags

        # Show the type of the object
        type = cat-file -t

        # Pretty print the object
        dump = cat-file -p

	# show difference between the HEAD and the index
	staged = diff --cached

	# show difference between working tree and the index
	unstaged = diff

	# show staged and unstaged changes (what would be committed with "git commit -a")
	both = diff HEAD

	# Show all files that are being ignored
	ignored = ls-files --others -i --exclude-standard

	# Have info show the remote urls
	info = !git config --get-regex 'remote\\.[^.]+\\.(push)?url' | sort | xargs -n2 printf '%25s   %s\n'

	# diffstat output, without the pager
	diffstat = !git --no-pager diff --stat -r

	# Prune all stale remote branches from the local repository
	prune-all = !git remote | xargs -n 1 git remote prune

        # Taken from man git-config... shows all new commits introduced
        # since the last pull
        new = !gitk --all --not ORIG_HEAD

        # Handy alias to show all relevant tips.  Using this like:
        #     git tips origin/pu ^origin/next | git oneline
        #
        # would show all branches in pu that are not in next.
        # Thanks to Jon Seymour for posting this on the git list.
        tips = "!_() { t=$(git rev-list --no-merges --max-count=1 \"$@\"); if test -n \"$t\"; then echo $t; _ \"$@\" ^$t; fi; }; _"
        oneline = !xargs -L1 git log --decorate --max-count=1 --oneline

        # Lists all the defined aliases
	# Taken from https://git.wiki.kernel.org/index.php/Aliases#alias
        aliases = !git config --get-regexp 'alias.*' | colrm 1 6 | sed 's/[ ]/ = /'

	# Taken from https://git.wiki.kernel.org/index.php/Aliases#Finding_the_right_commit

	# Getting pretty logs.
	lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative

	# If you use shortened hashes, sometimes you may encounter a
	# collision. The following alias prints out all commits whose
	# hash start with given string.
	abbr = "!sh -c 'git rev-list --all | grep ^$1 | while read commit; do git --no-pager log -n1 --pretty=format:\"%H %ci %an %s%n\" $commit; done' -"

	# Helpful aliases for fixing up and squashing commits from Jacob
	# Helwig's blog post:
	#   <http://technosorcery.net/2010/02/07/fun_with_the_upcoming_1.7_release_of_git_rebase_--interactive_--autosquash.html>
	fixup = !sh -c 'git commit -m \"fixup! $(git log -1 --format='\\''%s'\\'' $@)\"' -
	squash = !sh -c 'git commit -m \"squash! $(git log -1 --format='\\''%s'\\'' $@)\"' -
	ri = rebase --interactive --autosquash

[core]
	# make central area for git ignores. copy gitignores and change this to
	#   excludesfile = ~/.gitignores
	# if you need to customize it
	excludesfile = ~/projects/etc/gitconfig/gitignores

	whitespace = cr-at-eol,space-before-tab,trailing-space,tabwidth=8

	# This enables parallel index operations and can help when running
	# git on network drives or Windows.
	preloadindex = true

[diff]
	# Does rename detection during diff operation
	renames = true
	renamelimit = 3000

[push]
        default = upstream

[rerere]
        enabled = 1

[merge]
	ff = false

[sendemail]
	# Don't thread all the patches into a single topic.  Make each patch its
	# own topic.
	chainreplyto = false

[tig]
	show-date = relative
	show-rev-graph = yes
	show-refs = yes
	line-graphics = ascii

[transfer]
	fsckObjects = true

[pager]
	diff = diff-highlight | less
	show = diff-highlight | less
	log = diff-highlight | less

# You might need the below, if you regularly work against HTTPS servers that
# don't validate because of missing CA certs.  It's always better to fix that
# problem, but let's face it, it doesn't always happen.
#[http]
#	sslVerify = false
